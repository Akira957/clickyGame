{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Header","score","highscore","App","state","cards","clicked","componentDidMount","_this","newGame","setState","gameOver","console","log","this","forEach","card","count","alert","concat","includes","tempArr","push","tempScore","shuffleCards","i","length","j","Math","floor","random","_ref","_this2","components_Wrapper_Wrapper","components_Header_Header","map","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57e45d38.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n    <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n        </div>\r\n    </div>\r\n// the function that will grab the card images\r\n);\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\r\n// Wrapping all of the cards\r\nexport default Wrapper;","import React from 'react';\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n\r\n    <div className=\"header\">\r\n        <div className=\"title\">{props.children}</div>\r\n        <div className=\"scores\">\r\n            Score: {props.score} Highscore: {props.highscore}\r\n        </div>\r\n    </div>\r\n);\r\n//Displays the Score and the Highscore\r\nexport default Header;","import React, {Component} from 'react';\nimport Card from \"./components/Card/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Header from \"./components/Header/Header\";\nimport cards from \"./components/cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    cards,\n    score: 0,\n    highscore: 0,\n    clicked: []\n  };\n\n  componentDidMount = () => {\n    //when page loads do this\n    this.newGame();\n  }\n\n  newGame = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({\n        highscore: this.state.score //highscore getting set\n      })\n    };\n\n    this.setState({\n      cards,\n      score: 0,\n      clicked: []\n    })\n  }\n\n  gameOver = () => {\n    if(this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score}, function() {\n        console.log(this.state.highscore);\n      });\n      this.state.cards.forEach(card => {\n        card.count = false;\n      });\n      alert(`New Highscore: ${this.state.score} points`);\n      this.setState({score: 0});\n      return true;\n    }\n    //Alert will activate when a new highscore is added\n  }\n  clickCount = id => {\n    if (this.state.clicked.includes(id)) {\n      //we lost\n      this.newGame();\n      this.gameOver();\n    } else {\n      //correct guess\n      //add guess to clicked\n      let tempArr = this.state.clicked;\n      tempArr.push(id);\n      console.log(`updating the state!!!!!woohooo`)\n      this.setState({\n        clicked: tempArr\n      });\n      //increment counter\n      let tempScore = this.state.score;\n      tempScore ++;\n      this.setState({\n        score: tempScore\n      })\n      //shuffle cards\n      this.shuffleCards()\n    }\n   \n  }\n  shuffleCards = () => {\n    let tempArr = this.state.cards;\n   for (let i = tempArr.length - 1; i > 0; i--) {\n     let j = Math.floor(Math.random() * (i + 1));\n     [tempArr[i], tempArr[j]] = [tempArr[j], tempArr[i]];\n   }\n    this.setState({cards: tempArr});\n  }\n  //the function to shuffle the cards\n\n  render() {\n    console.log('im rendering')\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>Clicky Games</Header>\n        {this.state.cards.map(card => (\n          <Card name={card.image} image={card.image }id={card.id} key={card.id} clickCount={() => this.clickCount(card.id)}/>\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}